template<typename T> class RMQ
{
    private:
        vector<T> node;
        int N = 1;
    public:
        RMQ() = default;
        RMQ(int sz)
        {
            while(N < sz) N *= 2;
            node.assign(2 * N - 1, INF);
        }
        void update(int k, T x)
        {
            k += N - 1;
            node[k] = x;
            while(k > 0)
            {
                k = (k - 1) / 2;
                node[k] = min(node[2 * k + 1], node[2 * k + 2]);
            }
        }
        T query(int s, int t, int k, int l, int r)
        {
            if(r <= s or t <= l) return INF;
            if(s <= l and r <= t) return node[k];
            int mid  = (l + r) / 2;
            T a = query(s, t, 2 * k + 1, l, mid);
            T b = query(s, t, 2 * k + 2, mid, r);
            return min(a, b);
        }
        T query(int s, int t) { return query(s, t, 0, 0, N); }
};

template<typename T> class RSQ
{
    private:
        vector<T> node;
        int N = 1;
    public:
        RMQ() = default;
        RMQ(int sz)
        {
            while(N < sz) N *= 2;
            node.assign(2 * N - 1, 0);
        }
        void update(int k, T x)
        {
            k += N - 1;
            node[k] = x;
            while(k > 0)
            {
                k = (k - 1) / 2;
                node[k] = node[2 * k + 1] + node[2 * k + 2];
            }
        }
        T query(int s, int t, int k, int l, int r)
        {
            if(r <= s or t <= l) return 0;
            if(s <= l and r <= t) return node[k];
            int mid  = (l + r) / 2;
            T a = query(s, t, 2 * k + 1, l, mid);
            T b = query(s, t, 2 * k + 2, mid, r);
            return a + b;
        }
        T query(int s, int t) { return query(s, t, 0, 0, N); }
};

template<class Type> class Treap
{
   public:
       struct Node
       {
           Type key, pri;
           Node *left, *right;
       };
       Node *rightRotate(Node *u)
       {
           Node *q = u->left;
           u->left = q->right;
           q->right = u;
           return q;
       }
       Node *leftRotate(Node *u)
       {
           Node *q = u->right;
           u->right = q->left;
           q->left = u;
           return q;
       }
       Node *insert(Node *u, Type key, Type p)
       {
           if(u == nullptr)
           {
               Node *q = new Node;
               q->key = key;
               q->pri = p;
               q->left = nullptr, q->right = nullptr;
               return q;
           }
           else
           {
               if(key < u->key)
               {
                   u->left = insert(u->left, key, p);
                   if(u->left->pri > u->pri) u = rightRotate(u);
               }
               else
               {
                   u->right = insert(u->right, key, p);
                   if(u->right->pri > u->pri) u = leftRotate(u);
               }
               return u;
           }
       }
       bool find(Node *u, Type key)
       {
           if(u == nullptr) return false;
           else if(key == u->key) return true;
           else if(key < u->key) return find(u->left, key);
           else return find(u->right, key);
       }
       Node *remove(Node *u, Type key)
       {
           if(u == nullptr) return nullptr;
           if(key < u->key) u->left = remove(u->left, key);
           else if(key > u->key) u->right = remove(u->right, key);
           else return _remove(u, key);
           return u;
       }
       Node *_remove(Node *u, Type key)
       {
           if(u->left == nullptr && u->right == nullptr) return nullptr;
           else if(u->left == nullptr) u = leftRotate(u);
           else if(u->right == nullptr) u = rightRotate(u);
           else if(u->left->pri > u->right->pri) u = rightRotate(u);
           else u = leftRotate(u);
           return remove(u, key);
       }
       void print(Node *u)
       {
           inorder(u); cout << endl;
           preorder(u); cout << endl;
       }
       void inorder(Node *u)
       {
           if(u->left != nullptr) inorder(u->left);
           cout << " " << u->key;
           if(u->right != nullptr) inorder(u->right);
       }
       void preorder(Node *u)
       {
           cout << " " << u->key;
           if(u->left != nullptr) preorder(u->left);
           if(u->right != nullptr) preorder(u->right);
       }
};

template<class Type> class UnionFind
{
    private:
        vector<Type> data;
        int groups;
    public:
        UnionFind(int sz)
        {
            data.assign(sz, -1);
            this->groups = sz;
        }
        bool unite(Type x, Type y)
        {
            x = find(x), y = find(y);
            if (x == y) return (false);
            if (data[x] > data[y]) swap(x, y);
            data[x] += data[y];
            data[y] = x;
            groups--;
            return (true);
        }
        Type find(Type k) {
            if (data[k] < 0) return (k);
            return (data[k] = find(data[k]));
        }
        Type size(Type k) { return (-data[find(k)]); }
        int getGroups() { return this->groups; }
};
